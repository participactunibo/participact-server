configurations {
    jaxb
}



apply plugin : 'base'
apply plugin : 'war'
apply plugin : 'java'
apply plugin : 'eclipse-wtp'


description='ParticipAct Server'
group = 'it.unibo.paserver'
version = '1.0.0'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext.springVersion='3.2.1.RELEASE'
ext.springSecurityVersion='3.1.3.RELEASE'
ext.springSwfVersion='2.3.2.RELEASE'
ext.aspectjVersion='1.7.1'
ext.slf4jVersion='1.7.2'
ext.logbackVersion='1.0.9'
ext.hibernateVersion='4.2.8.Final'
ext.hibernateValidatorVersion='5.0.1.Final'
ext.jacksonVersion='2.2.2'

repositories {
    mavenCentral()
    maven {
    	url 'http://maven.springframework.org/release'
    }
    maven {
    	url 'http://maven.springframework.org/snapshot'
    }
    maven {
    	url 'http://maven.springframework.org/milestone'
    }
   
    maven {
    	url 'https://repository.jboss.org/nexus/content/repositories/releases/'
    }
    maven {
    	url 'http://download.java.net/maven/glassfish/org/glassfish/'
    }
    maven {
    	url 'http://snapshots.repository.codehaus.org'
    }
    maven {
    	url 'http://repo1.maven.org/maven2/com/fasterxml/jackson/'
    }
    maven {
    	url 'http://www.terracotta.org/download/reflector/releases'
    }
    maven {
    	url 'http://download.osgeo.org/webdav/geotools' 
    }
    maven {
    	url 'http://www.hibernatespatial.org/repository'
    }
}

// tag::wsdl[]
task genJaxb {
    ext.sourcesDir = "src/main/java/"
    ext.schema = "https://solweb.tper.it/tperit/webservices/opendata.asmx?wsdl"

 //   outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
        //    mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, 
            		schema: schema,
                    package: "it.unibo.tper.ws.domain") {
                arg(value: "-wsdl")               
                arg(value: "http://www.w3.org/2001/XMLSchema.xsd")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            
        }
    }
}
// end::wsdl[]


dependencies() {
    compile("org.springframework:spring-context:${springVersion}") {
       exclude group: 'commons-logging', module: 'commons-logging'
    }
    
    
    
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-web:$springVersion"

    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-access:$logbackVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

    // compile "javax.servlet:javax.servlet-api:3.1.0"
    
    providedCompile "javax.servlet:javax.servlet-api:3.0.1"

    compile "org.springframework.webflow:spring-webflow:$springSwfVersion"
    compile "org.springframework.webflow:spring-js:$springSwfVersion"
    compile "org.springframework.webflow:spring-binding:$springSwfVersion"

    compile "org.springframework.security:spring-security-core:$springSecurityVersion"
    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-taglibs:$springSecurityVersion"

    compile "cglib:cglib:2.2.2"

    compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    compile "org.hibernate:hibernate-core:$hibernateVersion"
    compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
    compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"

    compile "org.apache.commons:commons-lang3:3.1"
    compile "commons-fileupload:commons-fileupload:1.3"
    compile "com.h2database:h2:1.3.170"
    
    compile "joda-time:joda-time:2.2"
    compile "joda-time:joda-time-jsptags:1.1.1"
    compile "org.jadira.usertype:usertype.parent:3.0.0.CR3"
    compile "org.jadira.usertype:usertype.core:3.0.0.GA"
    compile "com.google.zxing:core:2.1"
    compile "com.google.zxing:javase:2.1"
    compile "postgresql:postgresql:9.1-901.jdbc4"
    compile "com.jolbox:bonecp:0.7.1.RELEASE"
    compile "org.apache.tika:tika-core:1.3"
//    compile("org.hibernate:hibernate-spatial:4.0-M1") {
//     	exclude group: "org.postgis", module: "postgis-jdbc"
//    }
//    runtime files('libs/postgis_1.5.8.jar')
    
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "org.twitter4j:twitter4j-core:3.0.5"
    
    compile "com.google.protobuf:protobuf-java:2.4.1"
    
    compile "org.apache.commons:commons-email:1.3.1"
    
    compile "org.mapfish.geo:mapfish-geo-lib:1.2.0"
    compile "com.vividsolutions:jts:1.13"
    
    compile 'org.springframework.ws:spring-ws-core:2.1.0.RELEASE'
   // compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.2"
    
    runtime "jstl:jstl:1.2"

//LEO
  //  compile 'javax.servlet.jsp:jsp-api:2.0'

    

    testCompile "junit:junit:4.9"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.springframework:spring-test-mvc:1.0.0.M2'
    }

eclipse {
    project.natures "org.springframework.ide.eclipse.core.springnature"
}

war {
    version = '' //We do this to make the wars versionless, when they are deployed the context root 
                 //of the app is equal to the file name, which is equal to the sample directory name.
}



//jar {
	//from genJaxb.classesDir
//}


task afterEclipseImport {
    dependsOn genJaxb
}
